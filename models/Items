// models/Item.js
const mongoose = require('mongoose');

// Define the schema
const ItemSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true },
    
});
// const userSchema = new mongoose.Schema({
//     email: {
//       type: String,
//       required: true,
//       unique: true,
//     },
//     password: {
//       type: String,
//       required: true,
//     },
//   });


  const PackageSchema = new mongoose.Schema({
    packageName: { type: String, required: false },
    description: { type: String, required: false },
    duration: { type: String, required: false},
    rating:{type:Number,required:false},
    price: { type: Number, required: false,min:1 ,max :5},
    activities: { type: [String], required:false },
    inclusions: { type: String, required:false },
    image: { type: String }, // Store image URL
  }, { timestamps: true });

  const RegisterSchema = new mongoose.Schema(
    {
      fullName: { type: String, required: true },
      userName: { type: String, required: true, unique: true },
      phone: { type: String, required: true, unique: true },
      email: { type: String, required: true, unique: true },
      password: { type: String, required: true },
      role: { 
        type: String, 
        required: true, 
        enum: ["Student", "Student Leader", "HOD", "Industry Representative"] 
      }, 
      studentID: { type: String, unique: true, sparse: true }, // Unique but ignored if null
      industryID: { type: String, unique: true, sparse: true }, // Unique but ignored if null
    },
    { timestamps: true }
  );
  

// // Hash password before saving
// userSchema.pre('save', async function (next) {
//     if (!this.isModified('password')) return next();
//     const salt = await bcrypt.genSalt(10);
//     this.password = await bcrypt.hash(this.password, salt);
//     next();
//   });
  
//   // Method to compare passwords
//   userSchema.methods.comparePassword = function (password) {
//     return bcrypt.compare(password, this.password);
//   };
  
  module.exports = {
    Item: mongoose.model('Item', ItemSchema), // Export the Item model
    Package: mongoose.model('Package', PackageSchema), 
    Register: mongoose.model('Register', RegisterSchema), // Export the User model
  };