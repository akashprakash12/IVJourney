// models/Item.js
const mongoose = require("mongoose");

// Define the schema
const ItemSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
});
// const userSchema = new mongoose.Schema({
//     email: {
//       type: String,
//       required: true,
//       unique: true,
//     },
//     password: {
//       type: String,
//       required: true,
//     },
//   });

const PackageSchema = new mongoose.Schema(
  {
    packageName: { type: String, required: true },
    description: { type: String, required: true },
    duration: { type: String, required: true },
    rating: { type: Number, required: false, default: 0 },
    price: { type: Number, required: true }, // ✅ Remove min/max
    activities: { type: [String], required: true },
    inclusions: { type: [String], required: true }, 
    instructions:{type:String,require:true},// ✅ Should be an array, not a string
    image: { type: String },
    votes: { type: Number, default: 0 }, // Total votes for this package
    votePercentage: { type: Number, default: 0 },
  },
  { timestamps: true }
);
const voteSchema = new mongoose.Schema({
  studentId: { type: String, required: true },
  packageId: { type: String, required: true },
  createdAt: { type: Date, default: Date.now },
});
const RegisterSchema = new mongoose.Schema(
  {
    fullName: { type: String, required: true },
    userName: { type: String, required: true, unique: true },
    phone: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    role: {
      type: String,
      required: true,
      enum: ["Student", "Student Leader", "HOD", "Industry Representative"],
    },
    studentID: { type: String, unique: true, sparse: true }, // Unique but ignored if null
    industryID: { type: String, unique: true, sparse: true }, // Unique but ignored if null
  },
  { timestamps: true }
);

const RequestSchema = new mongoose.Schema({
  Obj_id: { type: mongoose.Schema.Types.ObjectId, required: true, ref: "Register" },
  role: { type: String, required: true },
  email: { type: String, required: true },
  studentName: { type: String, required: true },
  department: { type: String, required: true },
  studentRep: { type: String, required: true },
  submissionDate: { type: Date, required: true }, // Date type
  industry: { type: String, required: true },
  date: { type: Date, required: true }, // Date type
  studentsCount: { type: Number, required: true },
  faculty: { type: String, required: true },
  transport: { type: String, required: true },
  packageDetails: { type: String, required: true },
  activity: { type: String, required: true },
  duration: { type: String, required: true },
  distance: { type: Number, required: true }, // Number type
  ticketCost: { type: Number, required: true },
  driverPhoneNumber: { type: String, required: true },
  checklist: { type: Object, required: true },
  status: { type: String, enum: ["Pending", "Approved", "Rejected"], default: "Pending" }
});

// const StudentSchema = new mongoose.Schema({
//   studentID: { type: String, required: true, unique: true },
//   fullName: { type: String, required: true },
//   department: { type: String, required: true },
//   studentRep: { type: String, required: true }, // Student Representative
// });

const ProfileSchema = new mongoose.Schema({
  name: { type: String, required: true },
  studentID: { type: String, default: null },
  industryID:{ type: String, default: null },
  branch: { type: String, default: null },
  email: { type: String, required: true, unique: true },
  phone: { type: String, default: null },
  profileImage: { type: String, default: null },
  role: { type: String, enum: ["student", "faculty", "admin"], default: "student" },
  createdAt: { type: Date, default: Date.now },
});







module.exports = {
  Item: mongoose.model("Item", ItemSchema), // Export the Item model
  Package: mongoose.model("Package", PackageSchema),
  Vote:mongoose.model("Vote", voteSchema),
  Register: mongoose.model("Register", RegisterSchema),
  Request: mongoose.model("Request", RequestSchema),

  Profile: mongoose.model("Profile", ProfileSchema),

};
